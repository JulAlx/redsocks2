base {
 log_debug = off;
 log_info = off;
 daemon = on;
 redirector = iptables;
}

redsocks {
 local_ip = 192.168.1.1; // Listening interface.
 local_port = 3128; // Listening port.
 ip = 1.2.3.4; // Remote proxy IP.
 port = 8443; // Remote proxy port.
 type = https-connect; // Use 'https-connect' with HTTPS proxies and 'http-connect' with HTTP proxies.
 // autoproxy = 0; // Change this parameter to 1 to enable the 'auto proxy' feature.
	// When autoproxy is set to non-zero, the connection to target
	// will be made directly first. If direct connection to target
	// fails for timeout/connection refuse, redsocks will try to
	// connect to target via the proxy.

 // timeout = 10; // timeout is meaningful when 'autoproxy' is non-zero.
 // timeout value is used when trying to connect to a destination
 // directly. Default is 10 seconds. When it is set to 0, default
 // timeout value will be used.
 // NOTE: Don't mess with this one if you don't know what it is. It may blow up on your face! Jeez!

 // login = username; // Remote proxy username.
 // password = passwd; // Remote proxy password.
}

//tcpdns {
    // Transform UDP DNS requests into TCP DNS requests.
    // You can also redirect connections to external TCP DNS server to
    // REDSOCKS transparent proxy via iptables.
    //local_ip = 192.168.1.1; // Local server to act as DNS server
    //local_port = 1053;      // UDP port to receive UDP DNS requests
    //tcpdns1 = 8.8.4.4;      // DNS server that supports TCP DNS requests
    //tcpdns2 = 8.8.8.8;      // DNS server that supports TCP DNS requests
    //timeout = 4;            // Timeout value for TCP DNS requests
//}
